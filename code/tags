!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
_GLB_H	usual_header.h	9;"	d
_GRAPH_LINKED_H	graph_linked.h	9;"	d
check_heap	heap_sort.cpp	/^void check_heap(int *a,int v,int n)$/;"	f
create_graph	graph_linked.cpp	/^void create_graph()$/;"	f
create_heap	heap_sort.cpp	/^void create_heap(int *a,int n)$/;"	f
edge_node	graph_linked.h	/^}edge_node;$/;"	t	typeref:struct:enode
enode	graph_linked.h	/^typedef struct enode$/;"	s
f	test_gdb.cpp	/^int f(int x,int y)$/;"	f
f	test_recursion.cpp	/^void f(int n)$/;"	f
first	graph_linked.h	/^    edgenode * first;$/;"	m	struct:vnode
main	heap_sort.cpp	/^int main()$/;"	f
main	main.cpp	/^int main()$/;"	f
main	qsort_main.cpp	/^int main()$/;"	f
main	selection_main.cpp	/^int main()$/;"	f
main	test_gdb.cpp	/^int main()$/;"	f
main	test_recursion.cpp	/^int main()$/;"	f
next	graph_linked.h	/^    struct node* next;$/;"	m	struct:enode	typeref:struct:enode::node
order	graph_linked.h	/^    int order;$/;"	m	struct:enode
partition	partition.cpp	/^int partition(int*a,int begin,int end)$/;"	f
qsort	qsort_main.cpp	/^void qsort(int *a,int begin,int end)$/;"	f
vertex	graph_linked.h	/^    char vertex;$/;"	m	struct:vnode
vertex_node	graph_linked.h	/^}vertex_node;$/;"	t	typeref:struct:vnode
vnode	graph_linked.h	/^typedef struct vnode$/;"	s
